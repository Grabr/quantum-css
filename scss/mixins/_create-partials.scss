// Create media query for requested breakpoint.
@mixin respond-to(
  $breakpoint-id,
  $breakpoints: $breakpoints
) {
  $width: map-get($breakpoints, $breakpoint-id);

  @if $width == 0 {
    @content;
  }
  @else {
    @media (min-width: $width) {
      @content;
    }
  }
}

// Inject breakpoint prefix for each selector in context and place inside corresponding media query.
@mixin create-responsive-classes(
  $class,
  $breakpoint-ids: map-keys($breakpoints),
  $breakpoints:    $breakpoints
) {
  @each $breakpoint-id in $breakpoint-ids {
    @include respond-to($breakpoint-id, $breakpoints) {
      .#{$breakpoint-id}#{if($breakpoint-id, $breakpoint-sep, null)}#{$class} {
        @content;
      }
    }
  }
}

// Generates cartesian product of `$props` and `$value`.
//
// $props - list of CSS property names.
// $value - value to assign to each property.
@mixin spread-properties($props, $value) {
  @each $prop in $props {
    #{$prop}: $value;
  }
}

// Generates partials for each id-value pair from `$values`.
// Each partial is named `&#{id}` and contains each property from `$props` with value `#{value}`.
//
// $values - Map from partial id to value.
// $props - List of CSS property names.
// [$pseudo-ids = null] - List of pseudo-class or pseudo-element partial ids to add to generated classes.
// [$pseudos = $pseudos] - Map from pseudo id to list of lists of pseudo-classes.
@mixin create-partials(
  $values,
  $props,
  $pseudo-ids:       null,
  $pseudos:          $pseudos,
  $create-no-pseudo: true
) {
  @each $value-id, $value in $values {
    // Choose separator depending on $value-id.
    $value-sep: if(str-length(#{$value-id}) == 0, null, if(type-of($value-id) == string, $literal-sep, $ordinal-sep));

    &#{$value-sep}#{$value-id} {

      // Append pseudo ids to selector when needed.
      @if $pseudo-ids {
        $selectors-all: ();
        @if $create-no-pseudo {
          $selectors-all: &;
        }
        @each $pseudo-id in $pseudo-ids {
          $selectors: ();
          $pseudo-sets: map-get($pseudos, $pseudo-id);

          // Pseudo-classes from space-separated list should be applied together.
          @if list-separator($pseudo-sets) == space {
            $pseudo-sets: ($pseudo-sets,);
          }

          @each $pseudo-set in $pseudo-sets {
            $selector: '';
            @each $pseudo in $pseudo-set {
              $selector: $selector + ':' + $pseudo;
            }
            $selectors: append($selectors, unquote($selector), comma);
          }

          $selectors-all: join($selectors-all, selector-append(&, #{$pseudo-sep}#{$pseudo-id}, $selectors), comma);
        }

        @at-root {
          #{$selectors-all} {
            @include spread-properties($props, $value);
          }
        }
      }
      @else {
        @if $create-no-pseudo {
          @include spread-properties($props, $value);
        }
      }
    }
  }
}

@mixin create-cartesian-partials(
  $values,
  $props,
  $pseudo-ids: map-keys($pseudos),
  $pseudos:    $pseudos
) {
  @include create-partials($values, $props, $pseudo-ids, $pseudos, true);
}
